import pandas as pd
import matplotlib.pyplot as plt
import telebot
from telebot import types
import re
from mendeleev import get_all_elements


# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ñ–∞–π–ª–∞ elements.csv
def create_elements_file():
    elements = []
    for elem in get_all_elements():
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∞—Ç–æ–º–Ω–æ–π –º–∞—Å—Å—ã (—É–¥–∞–ª–µ–Ω–∏–µ –∫–≤–∞–¥—Ä–∞—Ç–Ω—ã—Ö —Å–∫–æ–±–æ–∫ –¥–ª—è —Ä–∞–¥–∏–æ–∞–∫—Ç–∏–≤–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤)
        mass = elem.atomic_weight
        if isinstance(mass, str) and mass.startswith('['):
            mass = mass.strip('[]')

        elements.append({
            'Symbol': elem.symbol,
            'Name': elem.name,
            'MolarMass': float(mass) if mass else None
        })

    df = pd.DataFrame(elements)
    df.dropna(subset=['MolarMass'], inplace=True)  # –£–¥–∞–ª—è–µ–º —ç–ª–µ–º–µ–Ω—Ç—ã –±–µ–∑ –º–∞—Å—Å—ã
    df.to_csv('elements.csv', index=False)


# –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º –±–æ—Ç–∞
create_elements_file()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot('—Ç–æ–∫–µ–Ω –±–æ—Ç–∞')
elements_df = pd.read_csv('elements.csv')


def parse_formula(formula):
    pattern = re.compile(r'([A-Z][a-z]*)(\d*)')
    elements = pattern.findall(formula)
    return [(elem[0], int(elem[1]) if elem[1] else 1) for elem in elements]


def calculate_molar_mass(formula):
    try:
        elements = parse_formula(formula)
        total_mass = 0
        molar_data = []

        for symbol, count in elements:
            element = elements_df[elements_df['Symbol'] == symbol]
            if element.empty:
                return None, f"–≠–ª–µ–º–µ–Ω—Ç {symbol} –Ω–µ –Ω–∞–π–¥–µ–Ω"

            molar_mass = element['MolarMass'].values[0]
            element_mass = round(molar_mass * count)
            total_mass += element_mass
            molar_data.append((symbol, element_mass))

        return total_mass, molar_data
    except Exception as e:
        return None, str(e)


def create_mass_chart(molar_data):
    df = pd.DataFrame(molar_data, columns=['Element', 'Mass'])
    plt.figure(figsize=(10, 5))
    plt.bar(df['Element'], df['Mass'])
    plt.title('–í–∫–ª–∞–¥ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –≤ –º–æ–ª—è—Ä–Ω—É—é –º–∞—Å—Å—É')
    plt.xlabel('–≠–ª–µ–º–µ–Ω—Ç—ã')
    plt.ylabel('–ú–∞—Å—Å–∞ (–≥/–º–æ–ª—å)')
    plt.savefig('molar_chart.png')
    plt.close()


@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    help_text = """
üìö *–ë–æ—Ç –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞ –º–æ–ª—è—Ä–Ω–æ–π –º–∞—Å—Å—ã* 
–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ö–∏–º–∏—á–µ—Å–∫—É—é —Ñ–æ—Ä–º—É–ª—É (–Ω–∞–ø—Ä–∏–º–µ—Ä: H2O, C2H5OH, CaCO3)
"""
    bot.reply_to(message, help_text, parse_mode='Markdown')


@bot.message_handler(func=lambda message: True)
def process_formula(message):
    formula = message.text.strip()
    mass, data_or_error = calculate_molar_mass(formula)

    if mass is None:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {data_or_error}")
        return

    create_mass_chart(data_or_error)

    response = f"üî¨ –ú–æ–ª—è—Ä–Ω–∞—è –º–∞—Å—Å–∞ {formula}: {mass} –≥/–º–æ–ª—å\n\n"
    response += "\n".join([f"{elem[0]}: {elem[1]} –≥/–º–æ–ª—å" for elem in data_or_error])

    with open('molar_chart.png', 'rb') as photo:
        bot.send_photo(message.chat.id, photo, caption=response)


if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    bot.polling()